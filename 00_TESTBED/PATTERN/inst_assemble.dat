addi $1 $0 20     // $1 = $0 + 20
addi $2 $0 12     // $2 = $0 + 12
add  $3 $1 $2     // $3 = $1 + $2
sw   $3 $0 4      // Mem[$0+4] = $3
addi $4 $2 24     // $4 = $2 + 24
sub  $4 $4 $1     // $4 = $4 - $1
or   $5 $4 $2     // $5 = $4 | $2
xor  $6 $1 $2     // $6 = $1 ^ $2
sw   $6 $4 8      // Mem[$4+8] = $6
sw   $5 $0 8      // Mem[$0+8] = $5
lw   $5 $0 4      // $5 = Mem[$0+4]
beq  $3 $5 16     // $pc = ($3 == $5) ? $pc + 4 + 16 : $pc + 4
addi $7 $3 4      // $7 = $3 + 4
sub  $7 $7 $5     // $7 = $7 -$5
sw   $7 $4 8      // Mem[$4+8] = $7
bne  $3 $5 12     // $pc = ($3 != $5) ? $pc + 4 + 12 : $pc + 4
lw   $6 $0 8      // $6 = Mem[$0+8]
add  $7 $6 $2     // $7 = $6 +$2
sw   $7 $4 8      // Mem[$4+8] = $7
eof
